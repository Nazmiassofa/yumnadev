import discord
import logging
from discord.ext import commands
from typing import Optional, List

from .helper.prompt import MOD_PROMPT, MOD_VISION_PROMPT

log = logging.getLogger(__name__)

class ConfessModerationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        # Abaikan DM atau pesan dari bot sendiri
        if not message.guild or message.author == self.bot.user:
            return

        # # Hanya di guild & channel tertentu (production)
        if message.guild.id != 1234390981470715954:
            return
        if message.channel.id != 1371791820618469476:
            return
        
        # #----------------tetsing
        # if message.guild.id != 1275924936082460673:
        #     return
        # if message.channel.id != 1275924936136855669:
        #     return

        # Jika tidak ada embed sama sekali, hapus atau ignore sesuai kebutuhan
        if not message.embeds:
            try:
                await message.delete()
                log.info(f"Pesan tanpa embed dihapus: {message.id}")
            except discord.Forbidden:
                log.warning(f"Gagal menghapus pesan {message.id}: izin ditolak.")
            return

        # 1. Kumpulkan teks dari embed
        texts: List[str] = []
        for embed in message.embeds:
            if embed.description:
                texts.append(embed.description.strip())
            for field in embed.fields:
                if field.name:
                    texts.append(field.name.strip())
                if field.value:
                    texts.append(field.value.strip())
        text_content = "\n".join([t for t in texts if t]).strip()

        # 2. Kumpulkan URL gambar dari embed dan attachments
        image_urls: List[str] = []
        for embed in message.embeds:
            if embed.image and getattr(embed.image, "url", None):
                image_urls.append(embed.image.url)
            if embed.thumbnail and getattr(embed.thumbnail, "url", None):
                image_urls.append(embed.thumbnail.url)
        for att in message.attachments:
            # Cek content_type jika tersedia
            if att.content_type:
                if att.content_type.startswith("image/"):
                    image_urls.append(att.url)
            else:
                # fallback cek ekstensi
                fname = att.filename.lower()
                if fname.endswith((".png", ".jpg", ".jpeg", ".gif", ".webp", ".bmp")):
                    image_urls.append(att.url)

        # Flag hasil moderasi
        text_safe = True
        image_safe = True

        # 3. Jika ada teks, lakukan moderasi teks
        if text_content:
            log.info(f"[ CONFESS TEXT RECEIVED ] ID={message.id} CONTENT={text_content!r}")
            try:
                text_mod_response = await self.bot.ai.get_mod_response(
                    classification="general",
                    system_message=MOD_PROMPT,
                    user_message=text_content
                )
            except Exception as e:
                log.warning(f"Gagal memanggil get_mod_response untuk pesan {message.id}: {e}")
                # Kebijakan: jika gagal panggil moderasi teks, diasumsikan aman atau sebaliknya?
                # Di sini diasumsikan aman (text_safe tetap True). Jika mau lebih strict, set text_safe=False.
                text_mod_response = None

            resp_text = str(text_mod_response or "").lower()
            # Jika respons mengandung keyword unsafe
            if any(keyword in resp_text for keyword in ("reject", "flag", "unsafe")):
                text_safe = False
                log.info(f"Moderasi teks menolak pesan ID={message.id}")
            else:
                log.info(f"Moderasi teks menganggap aman pesan ID={message.id}")
        else:
            log.debug(f"Tidak ada teks di embed pesan ID={message.id}")

        # 4. Jika ada gambar, lakukan moderasi gambar
        if image_urls:

            for image_url in image_urls:
                log.info(f"[ CONFESS IMAGE RECEIVED ] ID={message.id} IMAGE_URL={image_url}")
                try:
                    image_mod_response = await self.bot.ai.get_vision_mod_response(
                        image_url=image_url,
                        system_message=MOD_VISION_PROMPT
                    )
                except Exception as e:
                    log.warning(f"Gagal memanggil get_vision_mod_response untuk pesan {message.id}, image {image_url}: {e}")
                    # Diasumsikan aman; jika ingin stricter, set image_safe=False
                    image_mod_response = None

                if image_mod_response is None:
                    log.info(f"Moderasi vision tidak mengembalikan respons untuk pesan {message.id}, image {image_url}. Diasumsikan aman.")
                    continue

                resp_img_text = str(image_mod_response).lower()
                if any(keyword in resp_img_text for keyword in ("reject", "flag", "unsafe")):
                    image_safe = False
                    log.info(f"Moderasi gambar menolak pesan ID={message.id}, image {image_url}")
                    # Jika satu image ditolak, tidak perlu cek image lain
                    break
                else:
                    log.info(f"Moderasi gambar menganggap aman pesan ID={message.id}, image {image_url}")
        else:
            log.debug(f"Tidak ada gambar di embed/attachment pesan ID={message.id}")

        if not text_content and not image_urls:
            return

        # Jika salah satu unsafe
        if not text_safe or not image_safe:
            # Hapus pesan
            try:
                await message.delete()
                log.info(f"Pesan ID={message.id} dihapus (text_safe={text_safe}, image_safe={image_safe})")
                # Kirim notifikasi sesuai alasan: bisa gabung pesan teks & gambar:
                alasan_parts = []
                if not text_safe:
                    alasan_parts.append("teks mengandung konten tidak pantas")
                if not image_safe:
                    alasan_parts.append("gambar mengandung konten tidak pantas")
                alasan = " dan ".join(alasan_parts)
                notif = f"Pesan dihapus\n-# {alasan.capitalize()}."
                await message.channel.send(notif, delete_after=30)
            except discord.Forbidden:
                log.warning(f"Gagal menghapus pesan {message.id}: izin ditolak.")
            return

        # Jika di sini, semua yang ada (teks dan/atau gambar) aman
        log.info(f"Pesan ID={message.id} dianggap aman sepenuhnya (text_safe={text_safe}, image_safe={image_safe})")
        return

async def setup(bot):
    await bot.add_cog(ConfessModerationCog(bot))


